import java.util.*;

class Ticket {
    char fromStation;
    char toStation;
    int PNRNumber;
    int noOfPassengers;
    static int PNR = 100;
    boolean isCancelled;
    boolean isWaitingList;
    int[] seatNo;

    Ticket(char fromStation, char toStation, int[] seatNo, boolean isWaitingList) {
        this.fromStation = fromStation;
        this.toStation = toStation;
        this.noOfPassengers = seatNo.length;
        this.seatNo = seatNo;
        this.PNRNumber = PNR++;
        this.isWaitingList = isWaitingList;
        this.isCancelled = false;
    }

    void viewTicket() {
        System.out.println("*********** Your Ticket *********");
        System.out.println(" PNR Number : " + this.PNRNumber);
        System.out.println(" Ticket Confirmed : " + (this.isWaitingList ? "No" : "Yes"));
        System.out.println(" From : " + this.fromStation);
        System.out.println(" To: " + this.toStation);
        System.out.println(" No fo Passengers " + this.seatNo.length);
        System.out.println(" Ticket Cancelled : " + (this.isCancelled ? "Yes" : "No"));
        System.out.print(" Seat No : ");
        for (int i = 0; i < this.seatNo.length; i++) {
            System.out.print(this.seatNo[i]);
            if (i == this.seatNo.length - 1)
                System.out.println();
            else
                System.out.print(",");
        }
    }
}

class TicketBooking {

    static Scanner scanner;
    static ArrayList<Ticket> tickets = new ArrayList<Ticket>();
    static ArrayList<Ticket> waitingList = new ArrayList<Ticket>();
    static boolean[][] occupancyChart = new boolean[8][5];

    static void init() {
        scanner = new Scanner(System.in);
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 5; j++)
                occupancyChart[i][j] = false;
        }
    }

    static boolean checkWaitingListAvailability() {
        if (waitingList.size() > 1) {
            return false;
        }
        return true;
    }

    static boolean checkSeatAvailability(char fromStation, char toStation, int noOfPassengers) {

        for (int i = fromStation - 97; i <= toStation - 97; i++) {
            int availableSeats = 0;
            for (int j = 0; j < 8; j++) {
                if (occupancyChart[j][i] == false)
                    availableSeats++;
            }
            if (noOfPassengers > availableSeats)
                return false;
        }

        return true;

    }

    static void bookTicket() {

        System.out.print("Enter From Station : ");
        char fromStation = Character.toLowerCase(scanner.next().charAt(0));
        System.out.print("Enter To Station : ");
        char toStation = Character.toLowerCase(scanner.next().charAt(0));
        System.out.print("Enter No of Passengers (<9) : ");
        int noOfPassengers = scanner.nextInt();
        int[] seatNo = new int[noOfPassengers];
        boolean isAvailable = checkSeatAvailability(fromStation, toStation, noOfPassengers);
        if (isAvailable) {
            for (int i = fromStation - 97; i <= toStation - 97; i++) {
                int bookedSeatCount = 0;
                for (int j = 0; j < 8; j++) {
                    if (occupancyChart[j][i] == false) {
                        occupancyChart[j][i] = true;
                        seatNo[bookedSeatCount] = j + 1;
                        bookedSeatCount++;
                    }
                    if (bookedSeatCount == noOfPassengers)
                        break;
                }
            }
            tickets.add(
                    new Ticket(Character.toUpperCase(fromStation), Character.toUpperCase(toStation), seatNo, false));
            System.out.println("\nTicket Booked Successfully!!! ");
        } else {
            System.out.println("\nNo Seats Available");
            boolean isWaitingAvailable = checkWaitingListAvailability();
            if (isWaitingAvailable) {
                waitingList.add(
                        new Ticket(Character.toUpperCase(fromStation), Character.toUpperCase(toStation), seatNo, true));
                System.out.println("\nPNR No : " + waitingList.get(waitingList.size() - 1).PNRNumber);
                System.out.println("\nAdded to Waiting List");
            } else {
                System.out.println("\nWaiting List is Full");
            }
        }
    }

    static void  checkWaitingList() {
        boolean removeA=false,removeB=false;
        for (int ind = 0; ind < waitingList.size(); ind++) {
            Ticket waitingListTicket = waitingList.get(ind);
            System.out.println("PNR : "+waitingListTicket.PNRNumber );
            boolean isAvailable = checkSeatAvailability(Character.toLowerCase(waitingListTicket.fromStation),
                    Character.toLowerCase(waitingListTicket.toStation), waitingListTicket.noOfPassengers);
            if (isAvailable) {
                for (int i = waitingListTicket.fromStation - 65; i <= waitingListTicket.toStation - 65; i++) {
                    int bookedSeatCount = 0;
                    for (int j = 0; j < 8; j++) {
                        if (occupancyChart[j][i] == false) {
                            occupancyChart[j][i] = true;
                            waitingListTicket.seatNo[bookedSeatCount] = j + 1;
                            bookedSeatCount++;
                        }
                        if (bookedSeatCount == waitingListTicket.noOfPassengers)
                            break;
                    }
                }
                waitingListTicket.isWaitingList = false;
                tickets.add(waitingListTicket);
                System.out.println("Waiting List PNR" + tickets.get(tickets.size() - 1).PNRNumber + " Allocated");
                if(ind==0)
                    removeA=true;
                if(ind==1)
                    removeB=true;
            }
        }
        if(removeA && removeB)
            waitingList.clear();
        else if(removeA)
            waitingList.remove(0);
        else if(removeB)
            waitingList.remove(1);

    }

    static void cancelTicket() {
        System.out.print("Enter PNR No : ");

        int pnrNo = scanner.nextInt();
        boolean inValidPNR = true;
        Ticket cancellationTicket = tickets.get(0);
        for (int i = 0; i < tickets.size(); i++) {
            if (tickets.get(i).PNRNumber == pnrNo) {
                cancellationTicket = tickets.get(i);
                inValidPNR = false;
            }
        }
        if (inValidPNR) {
            System.out.println("\n Invalid PNR No");
            cancelTicket();
        } else {

            for (int i = cancellationTicket.fromStation - 65; i <= cancellationTicket.toStation - 65; i++) {
                for (int j = 0; j < cancellationTicket.seatNo.length; j++) {
                    occupancyChart[cancellationTicket.seatNo[j] - 1][i] = false;
                }
            }
            cancellationTicket.isCancelled = true;
            System.out.println(pnrNo + " Ticket Cancelled !!!");

            checkWaitingList();
        }

    }

    static void printOccupancy() {
        System.out.println("\n  Occupancy Chart");
        System.out.println("\n  A B C D E ");
        for (int i = 0; i < 8; i++) {
            System.out.print(i + 1);
            for (int j = 0; j < 5; j++) {
                System.out.print(occupancyChart[i][j] ? " B" : " -");
            }
            System.out.println("\n");
        }
        System.out.println("\n -------------------------");
    }

    static void viewTicket() {
        System.out.print("Enter PNR No : ");

        int pnrNo = scanner.nextInt();

        for (int i = 0; i < tickets.size(); i++) {
            if (tickets.get(i).PNRNumber == pnrNo) {
                tickets.get(i).viewTicket();
                return;
            }
        }

        for (int i = 0; i < waitingList.size(); i++) {
            if (waitingList.get(i).PNRNumber == pnrNo) {
                waitingList.get(i).viewTicket();
                return;
            }
        }

        System.out.println("\n Invalid PNR No");
        viewTicket();
    }

    static void getChoice() {
        System.out.println("\n1.Book Ticket\n2.Cancel Ticket\n3.Print Occupancy Chart\n4.View Ticket\n5.Exit");
        int choice = scanner.nextInt();
        switch (choice) {
            case 1:
                bookTicket();
                getChoice();
                break;
            case 2:
                cancelTicket();
                getChoice();
                break;
            case 3:
                printOccupancy();
                getChoice();
                break;
            case 4:
                viewTicket();
                getChoice();
                break;
            case 5:
                break;
            default:
                System.out.println("Invalid Choice! Try Again");
                getChoice();
                break;
        }
    }

    public static void main(String args[]) {
        init();
        getChoice();
    }
}