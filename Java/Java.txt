Data Types in Java:

Primitive Types:
    boolean - default = 0 - 1bits - range = true or false
    char - default = `\u0000` - 16 bits - range = ‘\u0000’ (0) to ‘\uffff’ (65535)
    byte - default = 0 - 8bits - range = -128 to 127
    short - default = 0 - 16bits - range = -32768 to 32767
    int - default = 0 - 32bits - range = -2^31 to 2^31-1
    long - default = 0 - 64bits - range = -2^63 to 2^63-1
    float - default = 0.0 - 32bits - range upto 7 decimal digits
    double - default = 0.0 - 64bits - range upto 16 decimal digits\

Non-Primitive Types:
    Array,Strings,Class,Object,Interface

Operators and Precedance:
https://www.geeksforgeeks.org/operators-in-java/

Types of variables:
    Local Variable : its is available locally to the function
    Instance Variable : instance variables represents the instance of the class and it is declared with class name
    Static Variables : static variables are also know as class variables its values does not change on instance
                        its is declared with static keyword
                        Unlike instance variables, we can only have one copy of a static variable per class, irrespective of how many objects we create.
                        if created inside a class, accessible using class variable

Wrapper Classes:
    A Wrapper class is a class whose object wraps or contains primitive data types.
    When we create an object to a wrapper class, it contains a field and in this field, we can store primitive data types.
    Wrapper class in java provides the mechanism to convert primitive data type into object is called boxing and object into primitive data type is called unboxing.

    available in java.lang

    Primitive Type  Wrapper class
    boolean         Boolean
    char            Character
    byte            Byte
    short           Short
    int             Integer
    long            Long
    float           Float
    double          Double
    import java.lang.*;
    class test {
        public static void main(String[] args){
            // Same for all other primitive data types
            int a=20;
            Integer k=Integer.valueof(a);//converting int into Integer 
            Integer j=a;//autoboxing, now compiler will write Integer.valueOf(a) internally 

            //Converting Integer to int   
            Integer b=new Integer(3);   
            int p=b.intValue();//unboxing i.e converting Integer to int 
            int q=a;//auto unboxing, now compiler will write a.intValue() internally   
        }
    }


Strings 
    String literal method:
    when static allocated -> String s="geeks";
    Whenever a String Object is created as a literal, the object will 
    be created in the String constant pool. This allows JVM to optimize the initialization of String literal.

    using 'new' keyword method:
    when dynamically allocated -> String s=new String("geeks");
    JVM will create a new string object in normal (non pool) heap memory and the literal “Welcome” will be 
    placed in the string constant pool. The variable s will refer to the object in heap (non pool).

    It is preferred to use String literals as it allows JVM to optimize memory allocation.
    Strings are immutable
    String s="Sachin"; 
    s.concat(" Tendulkar"); // will not concat as strings are immutable
    s=s.concat(" Tendulkar");  // allocate to new string object as strings are immutable
    
String Methods 
        String s = "hello";
        System.out.println(s.charAt(0)); // gets the char at specified position
        // if s1 > s2, it returns positive number
        // if s1 < s2, it returns negative number
        // if s1 == s2, it returns 0
        System.out.println(s.compareTo("world!"));
        // concating strings
        // strings are immutable so we have to assign it
        s = s.concat(" World");
        System.out.println(s);

        // contains
        System.out.println(s.contains(" Wor"));

        // endsWith
        System.out.println(s.endsWith("!"));

        // startsWith
        System.out.println(s.startsWith("h"));

        // equals
        // return true if equals otherwise false
        System.out.println(s.equals("hello World"));

        // equalsIgnoreCase
        // same as equals but ignores cases
        System.out.println(s.equalsIgnoreCase("Hello World"));

        // String Format
        String sformat = String.format("%d is my age", 21);
        System.out.println(sformat);

        // Get Bytes
        String s1 = "ABCDEFG";
        byte[] barr = s1.getBytes();
        for (int i = 0; i < barr.length; i++) {
            System.out.println(barr[i]);
        }

        // Get Chars
        String str = "ABCDEFG";
        char[] ch = new char[10];
        try {
            str.getChars(1, 4, ch, 0);
            System.out.println(ch);
        } catch (Exception ex) {
            System.out.println(ex);
        }

        // indexOf
        // -1 if not found
        String sindex = "Hello world! hi";
        System.out.println(sindex.indexOf("! "));

        // isEmpty
        String sempty = "";
        System.out.println(sempty.isEmpty());

        // Join String using delimtter
        String joinString1 = String.join("-", "welcome", "to", "javatpoint");
        System.out.println(joinString1);

        // lastIndexOf
        String slastindex = "he!l!l!o";
        System.out.println(slastindex.lastIndexOf('!'));

        // replace
        String sreplace = "hello hi world hi world";
        sreplace = sreplace.replace("hi", "bye");
        System.out.println(sreplace);

        // replaceAll
        // in replaceAll we can use regex expression
        String sreplaceall = "eyuwankg123karthik123!chennai";
        sreplaceall = sreplaceall.replaceAll("\\d{2}!", "to");
        System.out.println(sreplaceall);

        // split
        // accepts regex expression
        String ssplit = "java string split method by javatpoint";
        System.out.println(ssplit);
        String[] words = ssplit.split("\\s");// splits the string based on whitespace
        // using java foreach loop to print elements of string array
        for (String w : words) {
            System.out.println(w);
        }

        //substring
        String text="hello world!";
        System.out.println(text.substring(0,7));

        //toCharArray
        char scharArray[]="hello".toCharArray();

        //toUpperCase and toLowerCase
        System.out.println(text);
        text=text.toUpperCase();
        System.out.println(text);
        text=text.toLowerCase();
        System.out.println(text);

        //trim
        text="     hello world     !";
        System.out.println(text);   
        text=text.trim();
        System.out.println(text);   


String Buffer
    StringBuffer class in java is same as String class except it is mutable
    import java.lang.*;
    class test {
        public static void main(String[] args){
            StringBuffer sb=new StringBuffer("hello");
            System.out.println(sb); //hello
            sb.append("world!"); 
            System.out.println(sb); // helloworld!
            sb.insert(1,"italy"); // insert from position 1
            System.out.println(sb); //hitalyelloworld!
            sb.replace(0,1,"france"); // insert from position 1
            System.out.println(sb); // franceitalyelloworld!
            sb.delete(11,sb.length());  // delete from position 11 to end of string
            System.out.println(sb);  // franceitaly
            sb.reverse();  // will reverse the string
            System.out.println(sb);  // ylatiecnarf
        }
    }

String Builder 
    StringBuilder in Java represents a mutable sequence of characters.
    The StringBuilder class differs from the StringBuffer class on the basis of synchronization
    StringBuilder class provides no guarantee of synchronization whereas the StringBuffer class does.
    faster in single thread

    methods:
    https://www.geeksforgeeks.org/stringbuilder-class-in-java-with-examples/


Arrays
    types of declarations:
        int[] array;
        int array[];
    initialization:
        int[] array=new int[20];

    for(int i=0;i<array.length;i++)
        System.out.println(array[i]);

    2D Arrays:
        int array[][] = new int[][];
        int arr[][] = { { 2, 7, 9 }, { 3, 6, 1 }, { 7, 4, 2 } };

    passing array as an argument:
        static void getArray(int arr[]);
        getArray(array);

    returning array:
        static int[] returnArray(){
            return int[];
        }
        int arr[]=returnArray();

    Array Cloning
        int arr[]={1,2,3};
        int array[]=arr.clone()
        cloning of single dimension array creates a deep copy
        cloning of multi dimension array creates a shallow copy

            int array[]={1,2,3,4,5};
        System.out.println(Arrays.asList(array)); // [[I@15db9742]
        
        Arrays.sort(array); // sort the array

        System.out.println(Arrays.binarySearch(array, 0,3,2)); // search the element and returns index

        int arr[]=Arrays.copyOf(array, 10);
        // copyRangeOf(array,startIndex,endIndex)
        for(int i=0;i<arr.length;i++)
            System.out.print(arr[i]+" "); //1 2 3 4 5 0 0 0 0 0 
            System.out.println();

        int ak[] = new int[20];
        Arrays.fill(ak, 20);
        for(int i=0;i<ak.length;i++)
            System.out.print(ak[i]+" "); //1 2 3 4 5 0 0 0 0 0 
        System.out.println();

        System.out.println(Arrays.toString(arr));
OOPS:
    Class and Objects 
    Class is blueprint or a protype 
    Object is a instance of a class
    Method and method passing 
    A method is a collection of statements that perform some specific task and return the result to the caller
    Message passing 
        it is a communication between threads
        like producer-consumer thread problem 
    4 pillars of OOPS:
        Abstraction
            Abstraction is the property by virtue of which only the essential details are displayed to the user.
            The trivial or non-essential units are not displayed to the user.
            In Java, abstraction is achieved by interfaces and abstract classes.
        Encapsulation
            It is defined as the wrapping up of data under a single unit.
            encapsulation is that it is a protective shield that prevents the data from being accessed by the code outside this shield
            Encapsulation can be achieved by declaring all the variables in a class 
            as private and writing public methods in the class to set and get the values of the variables.
        Inheritance
            It is a method which allows to inherit the features of another class
            It allows reusability of code 
            SuperClass: The class whose features are inherited
            subclass: The class that inherits the other class

            class derived-class extends base-class  
            {  
            //methods and fields  
            }  
            
        Polymorphism
            It is the ability define same method in different way
            overloading 
                same method name but different return type,no of argument,order of arguments
            overriding
                having same name,arguments,return type of the parent class method 
                private methods,static,final,costructors cannot be overridden
                using keyword 'super.methodname()' we can call the parent method inside the overridden methods in child class



AccessModifiers:
    Public: Accessible in all classes in your application
    Protected:  Accessible within the package in which it is defined and in its subclass(es) 
    Private:  Accessible only within the class in which it is defined.
    default: Accessible within the same class and package within which its class is defined.