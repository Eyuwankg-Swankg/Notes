Data Types in Java:

Primitive Types:
    boolean - default = 0 - 1bits - range = true or false
    char - default = `\u0000` - 16 bits - range = ‘\u0000’ (0) to ‘\uffff’ (65535)
    byte - default = 0 - 8bits - range = -128 to 127
    short - default = 0 - 16bits - range = -32768 to 32767
    int - default = 0 - 32bits - range = -2^31 to 2^31-1
    long - default = 0 - 64bits - range = -2^63 to 2^63-1
    float - default = 0.0 - 32bits - range upto 7 decimal digits
    double - default = 0.0 - 64bits - range upto 16 decimal digits\

Non-Primitive Types:
    Array,Strings,Class,Object,Interface

Operators and Precedance:
https://www.geeksforgeeks.org/operators-in-java/

Types of variables:
    Local Variable : its is available locally to the function
    Instance Variable : instance variables represents the instance of the class and it is declared with class name
    Static Variables : static variables are also know as class variables its values does not change on instance
                        its is declared with static keyword
                        Unlike instance variables, we can only have one copy of a static variable per class, irrespective of how many objects we create.
                        if created inside a class, accessible using class variable

Wrapper Classes:
    A Wrapper class is a class whose object wraps or contains primitive data types.
    When we create an object to a wrapper class, it contains a field and in this field, we can store primitive data types.
    Wrapper class in java provides the mechanism to convert primitive data type into object is called boxing and object into primitive data type is called unboxing.

    available in java.lang

    Primitive Type  Wrapper class
    boolean         Boolean
    char            Character
    byte            Byte
    short           Short
    int             Integer
    long            Long
    float           Float
    double          Double
    import java.lang.*;
    class test {
        public static void main(String[] args){
            // Same for all other primitive data types
            int a=20;
            Integer k=Integer.valueof(a);//converting int into Integer 
            Integer j=a;//autoboxing, now compiler will write Integer.valueOf(a) internally 

            //Converting Integer to int   
            Integer b=new Integer(3);   
            int p=b.intValue();//unboxing i.e converting Integer to int 
            int q=a;//auto unboxing, now compiler will write a.intValue() internally   
        }
    }


Strings 
    String literal method:
    when static allocated -> String s="geeks";
    Whenever a String Object is created as a literal, the object will 
    be created in the String constant pool. This allows JVM to optimize the initialization of String literal.

    using 'new' keyword method:
    when dynamically allocated -> String s=new String("geeks");
    JVM will create a new string object in normal (non pool) heap memory and the literal “Welcome” will be 
    placed in the string constant pool. The variable s will refer to the object in heap (non pool).

    It is preferred to use String literals as it allows JVM to optimize memory allocation.
    Strings are immutable
    String s="Sachin"; 
    s.concat(" Tendulkar"); // will not concat as strings are immutable
    s=s.concat(" Tendulkar");  // allocate to new string object as strings are immutable